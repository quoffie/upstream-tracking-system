// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  COMPANY_ADMIN
  INSPECTOR
  COMPLIANCE_OFFICER
  IMMIGRATION_OFFICER
  JV_COORDINATOR
  PERSONNEL
  FINANCE_OFFICER
  COMMISSION_ADMIN
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  REQUIRES_ADDITIONAL_INFO
  APPROVED
  REJECTED
}

enum PermitType {
  EXPLORATION
  PRODUCTION
  PERSONNEL
  INSTALLATION
  ENVIRONMENTAL
  WORK_PERMIT // Specific for personnel
}

enum PermitStatus {
  DRAFT
  SUBMITTED_TO_PC
  PENDING_PC_APPROVAL
  FORWARDED_TO_GIS
  PENDING_GIS_APPROVAL
  APPROVED_BY_GIS // Final approval for personnel permits
  REJECTED_BY_PC
  REJECTED_BY_GIS
  UNDER_REVIEW // General status for other permit types
  REQUIRES_ADDITIONAL_INFO
  APPROVED // General status for other permit types
  REJECTED // General status for other permit types
  ACTIVE
  EXPIRED
  CANCELLED
}

enum CompanyCategory {
  SPECIALIZED
  GENERAL
}

enum NotificationType {
  IN_APP
  EMAIL
  SMS
}

enum CompanyRegistrationStatus {
  PENDING_EMAIL_VERIFICATION
  PENDING_FORM_COMPLETION
  PENDING_PAYMENT
  SUBMITTED_FOR_REVIEW
  REQUIRES_CLARIFICATION
  APPROVED
  REJECTED
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  firstName         String
  lastName          String
  role              UserRole
  phone             String?
  profilePicture    String?
  isActive          Boolean   @default(true)
  lastLogin         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  company           Company?  @relation(fields: [companyId], references: [id])
  companyId         String?
  notifications     Notification[]
  sentNotifications Notification[] @relation("SentBy")
  auditLogs         AuditLog[]
  personnel         Personnel?
  companyRegistration CompanyRegistration? // User can have one pending/active registration
}

model CompanyRegistration {
  id                             String                      @id @default(uuid())
  status                         CompanyRegistrationStatus @default(PENDING_EMAIL_VERIFICATION)
  companyName                    String
  incorporationDate              DateTime
  incorporationPlace             String
  postalAddress                  String
  companyEmail                   String // Distinct from user's login email
  website                        String?
  contactPersonName              String
  contactPersonMobile            String
  subsidiaryOrAffiliateName      String?
  parentCompanyNationality       String?
  corporateStructureDetails      Json? // Could be a path to a diagram or structured JSON
  shareholders                   Json // Array of { name: String, address: String, nationality: String, percentage: Float }
  holdingCompanyShareholders     Json? // Array of { name: String, sharesInHoldingCo: String } - structure TBD
  directorsAndManagement         Json // Array of { name: String, position: String, nationality: String }
  permitCategory                 CompanyCategory
  preferredActivities            String[] // List of selected activities (max 2)
  activityDescription            String
  financialCapabilityInfo        Json // Based on PART TWO - A: type (a,b,c,d), reportPaths: String[], projectedRevenuePath: String?
  fundingSourcesGhana            String
  organizationalChartPath        String?
  staffDetails                   Json // Array of { name: String, gender: String, position: String, nationality: String }
  expertiseSourcing              String // e.g., "Local and International"
  equipmentSources               String
  pastPetroleumExperience        String?
  globalOperations               String?
  ghanaContractsAndInvestments   String?
  threeYearPlanOrgDev            Json // { strategy: String, employmentPlan: String, budget: Float }
  threeYearPlanTechTransfer      Json // { program: String, budget: Float }
  threeYearPlanTraining          Json // { program: String, budget: Float }
  threeYearPlanCSR               Json // { program: String, budget: Float }
  ghanaianOwnershipPercentage    Float?
  employmentDetailsLocalContent  String? // PART FOUR - 2
  infrastructuralInvestmentsGhana Float?
  servicesToApplicantLast12Months Json? // Array of { type: String, contractSum: Float, clientName: String }
  servicesByApplicantLast12Months Json? // Array of { type: String, contractSum: Float, customerName: String }
  rawMaterialsUtilized           String?
  ghanaianFinishedGoodsUtilized  String?
  hssePolicyDocPath              String?
  miscellaneousInfo              String?
  declarationName                String
  declarationPosition            String
  declarationDate                DateTime
  adminReviewComments            String?
  createdAt                      DateTime                    @default(now())
  updatedAt                      DateTime                    @updatedAt

  user                           User                        @relation(fields: [userId], references: [id])
  userId                         String                      @unique // Each user can only have one active registration application

  approvedCompany                Company?                    @relation("RegistrationToCompany", fields: [approvedCompanyId], references: [id])
  approvedCompanyId              String?                     @unique

  payment                        Payment?                    @relation("CompanyRegistrationPayment")

  documents                      Document[]
  inspections                    Inspection[]
}

model Company {
  id                      String    @id @default(uuid())
  name                    String
  registrationNumber      String    @unique
  incorporationDate       DateTime
  address                 String
  email                   String
  phone                   String
  website                 String?
  category                CompanyCategory
  specialization          String[]
  isIndigenous            Boolean   @default(false)
  indigenousOwnershipPct  Float?
  isActive                Boolean   @default(true)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  users                   User[]
  personnel               Personnel[]
  documents               Document[]
  jvCompanies             JVCompany[]
  localContentPlans       LCPlan[]
  performanceReports      LCPerformanceReport[]
  companyRegistration     CompanyRegistration? @relation("RegistrationToCompany")
  permits                 Permit[] @relation("CompanyPermits")
}

model Permit {
  id                      String    @id @default(uuid())
  permitType              PermitType
  status                  PermitStatus @default(DRAFT)
  applicationDate         DateTime   @default(now())
  approvalDate            DateTime?
  expiryDate              DateTime?
  referenceNumber         String     @unique @default(cuid()) // Auto-generated unique ref number
  applicationDetails      Json?      // Form specific data for the permit type
  rejectionReason         String?
  reviewComments          String?
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt

  company                 Company?   @relation("CompanyPermits", fields: [companyId], references: [id])
  companyId               String?    // Optional: A permit might be for personnel not directly tied to a company initially, or company applies

  personnel               Personnel? @relation("PersonnelPermits", fields: [personnelId], references: [id])
  personnelId             String?    // Optional: For personnel-specific permits like work permits

  documents               Document[] // Supporting documents for the permit application
  payments                Payment[]  @relation("PermitPayments")
  inspections             Inspection[]
}

model JVCompany {
  id                      String    @id @default(uuid())
  name                    String
  registrationNumber      String    @unique
  indigenousEquity        Float
  foreignEquity           Float
  boardResolutionDoc      String?
  equityAgreementDoc      String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  company                 Company   @relation(fields: [companyId], references: [id])
  companyId               String
  documents               Document[]
}

model Personnel {
  id                      String    @id @default(uuid())
  firstName               String
  lastName                String
  email                   String    @unique
  phone                   String
  nationality             String
  position                String
  isExpatriate            Boolean   @default(false)
  passportNumber          String?
  workPermitNumber        String?
  workPermitExpiry        DateTime?
  medicalCertExpiry       DateTime?
  bosietCertExpiry        DateTime?
  permits                 Permit[] @relation("PersonnelPermits")
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  company                 Company   @relation(fields: [companyId], references: [id])
  companyId               String
  user                    User?     @relation(fields: [userId], references: [id])
  userId                  String?   @unique
  documents               Document[]
}



model LCPlan {
  id                      String    @id @default(uuid())
  year                    Int
  trainingBudget          Float
  localEmploymentTarget   Float
  localProcurementTarget  Float
  successionPlanDoc       String?
  status                  ApplicationStatus @default(DRAFT)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  company                 Company   @relation(fields: [companyId], references: [id])
  companyId               String
  documents               Document[]
}

model LCPerformanceReport {
  id                      String    @id @default(uuid())
  reportingPeriod         String
  actualTrainingSpend     Float
  actualLocalEmployment   Float
  actualLocalProcurement  Float
  challenges              String?
  mitigationMeasures      String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  company                 Company   @relation(fields: [companyId], references: [id])
  companyId               String
  documents               Document[]
}

model Document {
  id                      String    @id @default(uuid())
  fileName                String
  fileType                String // e.g., PDF, DOCX, JPG
  filePath                String // Path to the stored file
  fileSize                Int // Size in bytes
  description             String?
  uploadedAt              DateTime  @default(now())
  company                 Company?  @relation(fields: [companyId], references: [id])
  companyId               String?
  companyRegistration     CompanyRegistration? @relation(fields: [companyRegistrationId], references: [id])
  companyRegistrationId   String?
  personnel               Personnel? @relation(fields: [personnelId], references: [id])
  personnelId             String?
  permit                  Permit?   @relation(fields: [permitId], references: [id])
  permitId                String?

  jvCompany               JVCompany? @relation(fields: [jvCompanyId], references: [id])
  jvCompanyId             String?
  lcPlan                  LCPlan?   @relation(fields: [lcPlanId], references: [id])
  lcPlanId                String?
  lcReport                LCPerformanceReport? @relation(fields: [lcReportId], references: [id])
  lcReportId              String?
  inspection              Inspection? @relation(fields: [inspectionId], references: [id])
  inspectionId            String?
}

model Notification {
  id                      String    @id @default(uuid())
  title                   String
  message                 String
  type                    NotificationType
  isRead                  Boolean   @default(false)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  user                    User      @relation(fields: [userId], references: [id])
  userId                  String
  sentBy                  User      @relation("SentBy", fields: [sentById], references: [id])
  sentById                String
}

model Payment {
  id                      String    @id @default(uuid())
  amount                  Float
  currency                String    @default("GHS")
  paymentDate             DateTime  @default(now())
  paymentReference        String    @unique
  paymentMethod           String
  status                  String
  description             String
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  companyRegistration     CompanyRegistration? @relation("CompanyRegistrationPayment", fields: [companyRegistrationId], references: [id])
  companyRegistrationId   String?              @unique
  permit                  Permit    @relation("PermitPayments", fields: [permitId], references: [id])
  permitId                String
}

model Inspection {
  id                      String    @id @default(uuid())
  inspectionDate          DateTime
  location                String
  inspectionType          String
  status                  String
  findings                String?
  recommendations          String?
  followUpRequired        Boolean   @default(false)
  followUpDate            DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  companyRegistration     CompanyRegistration? @relation(fields: [companyRegistrationId], references: [id])
  companyRegistrationId   String?
  permit                  Permit    @relation(fields: [permitId], references: [id])
  permitId                String
  documents               Document[]
}

model AuditLog {
  id                      String    @id @default(uuid())
  action                  String
  entityType              String
  entityId                String
  oldValues               Json?
  newValues               Json?
  ipAddress               String?
  userAgent               String?
  createdAt               DateTime  @default(now())
  user                    User      @relation(fields: [userId], references: [id])
  userId                  String
}