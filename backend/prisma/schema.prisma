// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  COMPANY_ADMIN
  INSPECTOR
  COMPLIANCE_OFFICER
  IMMIGRATION_OFFICER
  JV_COORDINATOR
  PERSONNEL
  FINANCE_OFFICER
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  REQUIRES_ADDITIONAL_INFO
  APPROVED
  REJECTED
}

enum PermitType {
  EXPLORATION
  PRODUCTION
  PERSONNEL
  INSTALLATION
  ENVIRONMENTAL
}

enum CompanyCategory {
  SPECIALIZED
  GENERAL
}

enum NotificationType {
  IN_APP
  EMAIL
  SMS
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  firstName         String
  lastName          String
  role              UserRole
  phone             String?
  profilePicture    String?
  isActive          Boolean   @default(true)
  lastLogin         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  company           Company?  @relation(fields: [companyId], references: [id])
  companyId         String?
  notifications     Notification[]
  sentNotifications Notification[] @relation("SentBy")
  auditLogs         AuditLog[]
  personnel         Personnel?
}

model Company {
  id                      String    @id @default(uuid())
  name                    String
  registrationNumber      String    @unique
  incorporationDate       DateTime
  address                 String
  email                   String
  phone                   String
  website                 String?
  category                CompanyCategory
  specialization          String[]
  isIndigenous            Boolean   @default(false)
  indigenousOwnershipPct  Float?
  isActive                Boolean   @default(true)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  users                   User[]
  permits                 Permit[]
  personnel               Personnel[]
  documents               Document[]
  jvCompanies             JVCompany[]
  localContentPlans       LCPlan[]
  performanceReports      LCPerformanceReport[]
}

model JVCompany {
  id                      String    @id @default(uuid())
  name                    String
  registrationNumber      String    @unique
  indigenousEquity        Float
  foreignEquity           Float
  boardResolutionDoc      String?
  equityAgreementDoc      String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  company                 Company   @relation(fields: [companyId], references: [id])
  companyId               String
  documents               Document[]
}

model Personnel {
  id                      String    @id @default(uuid())
  firstName               String
  lastName                String
  email                   String    @unique
  phone                   String
  nationality             String
  position                String
  isExpatriate            Boolean   @default(false)
  passportNumber          String?
  workPermitNumber        String?
  workPermitExpiry        DateTime?
  medicalCertExpiry       DateTime?
  bosietCertExpiry        DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  company                 Company   @relation(fields: [companyId], references: [id])
  companyId               String
  user                    User?     @relation(fields: [userId], references: [id])
  userId                  String?   @unique
  documents               Document[]
  permits                 Permit[]  @relation("PersonnelPermits")
}

model Permit {
  id                      String    @id @default(uuid())
  permitNumber            String    @unique
  permitType              PermitType
  applicationDate         DateTime  @default(now())
  issueDate               DateTime?
  expiryDate              DateTime?
  status                  ApplicationStatus @default(DRAFT)
  projectName             String?
  projectDescription      String?
  localContentPlan        String?
  rejectionReason         String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  company                 Company   @relation(fields: [companyId], references: [id])
  companyId               String
  personnel               Personnel[] @relation("PersonnelPermits")
  documents               Document[]
  payments                Payment[]
  inspections             Inspection[]
}

model LCPlan {
  id                      String    @id @default(uuid())
  year                    Int
  trainingBudget          Float
  localEmploymentTarget   Float
  localProcurementTarget  Float
  successionPlanDoc       String?
  status                  ApplicationStatus @default(DRAFT)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  company                 Company   @relation(fields: [companyId], references: [id])
  companyId               String
  documents               Document[]
}

model LCPerformanceReport {
  id                      String    @id @default(uuid())
  reportingPeriod         String
  actualTrainingSpend     Float
  actualLocalEmployment   Float
  actualLocalProcurement  Float
  challenges              String?
  mitigationMeasures      String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  company                 Company   @relation(fields: [companyId], references: [id])
  companyId               String
  documents               Document[]
}

model Document {
  id                      String    @id @default(uuid())
  fileName                String
  fileType                String
  fileSize                Int
  filePath                String
  uploadDate              DateTime  @default(now())
  expiryDate              DateTime?
  documentType            String
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  company                 Company?  @relation(fields: [companyId], references: [id])
  companyId               String?
  personnel               Personnel? @relation(fields: [personnelId], references: [id])
  personnelId             String?
  permit                  Permit?   @relation(fields: [permitId], references: [id])
  permitId                String?
  jvCompany               JVCompany? @relation(fields: [jvCompanyId], references: [id])
  jvCompanyId             String?
  lcPlan                  LCPlan?   @relation(fields: [lcPlanId], references: [id])
  lcPlanId                String?
  lcReport                LCPerformanceReport? @relation(fields: [lcReportId], references: [id])
  lcReportId              String?
  inspection              Inspection? @relation(fields: [inspectionId], references: [id])
  inspectionId            String?
}

model Notification {
  id                      String    @id @default(uuid())
  title                   String
  message                 String
  type                    NotificationType
  isRead                  Boolean   @default(false)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  user                    User      @relation(fields: [userId], references: [id])
  userId                  String
  sentBy                  User      @relation("SentBy", fields: [sentById], references: [id])
  sentById                String
}

model Payment {
  id                      String    @id @default(uuid())
  amount                  Float
  currency                String    @default("GHS")
  paymentDate             DateTime  @default(now())
  paymentReference        String    @unique
  paymentMethod           String
  status                  String
  description             String
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  permit                  Permit    @relation(fields: [permitId], references: [id])
  permitId                String
}

model Inspection {
  id                      String    @id @default(uuid())
  inspectionDate          DateTime
  location                String
  inspectionType          String
  status                  String
  findings                String?
  recommendations          String?
  followUpRequired        Boolean   @default(false)
  followUpDate            DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  permit                  Permit    @relation(fields: [permitId], references: [id])
  permitId                String
  documents               Document[]
}

model AuditLog {
  id                      String    @id @default(uuid())
  action                  String
  entityType              String
  entityId                String
  oldValues               Json?
  newValues               Json?
  ipAddress               String?
  userAgent               String?
  createdAt               DateTime  @default(now())
  user                    User      @relation(fields: [userId], references: [id])
  userId                  String
}